/*
 * Copyright (C) 2025 Tony Luken <tonyluken62+gerberfilereader.gmail.com>
 * 
 * This file is part of GerberFileReader.
 * 
 * GerberFileReader is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, either version 3 of 
 * the License, or (at your option) any later version.
 * 
 * GerberFileReader is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with GerberFileReader. If
 * not, see <http://www.gnu.org/licenses/>.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.Test;

import gerberFileReader.AttributeDictionary;
import gerberFileReader.GerberFileReader;
import gerberFileReader.GraphicalObject;
import standardAttributes.Net;
import standardAttributes.Pin;

public class NetlistGenerationTest {

    private Exception savedError = null;
    
    /**
     * This test extracts the net list from a Gerber file and compares it to the net list generated 
     * directly by KiCad to ensure the net lists are the same.
     * 
     * @throws Exception - if there is a problem either reading the files or if the net lists 
     * miscompare.
     */
    @Test
    public void testNetListGeneration() throws Exception {
        File testFileDir = new File(ClassLoader.getSystemResource("gerberFiles").getPath());
        File expectedDir = new File(ClassLoader.getSystemResource("expectedResults").getPath());
        
        //This particular board design only has components on the top side so we only need to
        //examine the top copper layer to obtain all the net list information. If the board also had
        //components on the bottom side or embedded in inner layers, those layers would also need
        //to be examined as well to obtain a complete net list.
        File gerberFile = new File(testFileDir.getPath() + File.separator + "sampleBoardDesign" + 
                File.separator + "IR2IP-F_Cu.gbr" );
        
        //The expected net list was generated by KiCad and exported in CadStar format
        File expectedFile = new File(expectedDir.getPath() + File.separator + "sampleBoardDesign" + 
                File.separator + "IR2IP.frp" );
        
        //Parse the Gerber file in the background
        GerberFileReader parser = new GerberFileReader(gerberFile);
        System.out.println("Parsing of Gerber file started...");
        parser.parseFileInBackground(null, null, (ex)->savedError=ex);
        
        //Read in the expected net list
        System.out.println("Reading expected net list...");
        List<String> expectedNetList = readExpectedNetList(expectedFile);
        System.out.println("Reading of expected net list completed.");
        
        //Wait for the parser to finish
        while (!parser.isDone() && !parser.isError()) {
            //spin until the parser is done (or errors out)
            Thread.onSpinWait();
        }
        
        if (parser.isError()) {
            throw new Exception(savedError.getMessage());
        }
        System.out.println("Parsing of Gerber file completed successfully.");
        
        //Extract the Gerber net list
        System.out.println("Extracting Gerber net list...");
        Map<String, Integer> pinCounts = new HashMap<>();
        List<String> gerberNetList = new ArrayList<>();
        goLoop: for (GraphicalObject go : parser.getGraphicsStream().getStream()) {
            AttributeDictionary goAttributes = go.getAttributes();
            Pin pinAttribute = goAttributes.get(new Pin());
            if (pinAttribute == null) {
                continue;
            }
            Net netAttribute = goAttributes.get(new Net());
            if (netAttribute == null || netAttribute.isEmpty() || netAttribute.isNotConnected()) {
                continue;
            }
            
            //Extract the net name
            String netName = netAttribute.getNetName();
            
            //Build a net terminal as a string "<net name>,<ref des>,<pin #>"
            String netTerminal = netName + "," +
                    pinAttribute.getReferenceDesignator() + "," +
                    pinAttribute.getNumber();

            //Skip any duplicates
            for (String existingNetTerminal : gerberNetList) {
                if (netTerminal.equals(existingNetTerminal)) {
                    continue goLoop;
                }
            }
            
            gerberNetList.add(netTerminal);
            
            //Keep track of how many pins are in each net
            if (pinCounts.containsKey(netName)) {
                pinCounts.put(netName, pinCounts.get(netName)+1);
            }
            else {
                pinCounts.put(netName, 1);
            }
        }
        Collections.sort(gerberNetList);
        
        //Remove any single pin nets (the expected net list does not include single pin nets)
        List<String> gerberNetlistCopy = new ArrayList<>(gerberNetList);
        for (String netTerminal : gerberNetlistCopy) {
            int idx = netTerminal.indexOf(",");
            String netName = netTerminal.substring(0, idx);
            if (pinCounts.get(netName) == 1) {
                gerberNetList.remove(netTerminal);
                pinCounts.put(netName, 0);
            }
        }
        System.out.println("Extraction of Gerber net list completed.");
        
        //Make sure both net lists are the same size
        System.out.println("Comparing Gerber net list with expected net list...");
        if (gerberNetList.size() != expectedNetList.size()) {
            throw new Exception("The Gerber net list is not the same size as the expected net list.");
        }
        
        //Check each net terminal to make sure they are the same
        int i = 0;
        for(String netTerminal : gerberNetList) {
            if (!netTerminal.equals(expectedNetList.get(i))) {
                throw new Exception("Net list miscompare: " + netTerminal + "  <->  " + expectedNetList.get(i));
            }
            i++;
        }
        
        System.out.println("All " + gerberNetList.size() + " net terminals compared successfully.");
    }

    /**
     * Reads a CadStar netlist file generated by KiCad
     * @param expectedFile - the file to read
     * @return the sorted netlist
     * @throws FileNotFoundException
     * @throws IOException
     */
    private List<String> readExpectedNetList(File expectedFile) throws FileNotFoundException, IOException {
        List<String> ret = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(expectedFile))) {
            String line = reader.readLine();
            String netName = "";
            boolean maybeMore = false;
            while (line != null) {
                if (line.startsWith(".ADD_TER")) {
                    line = line.substring(8).strip();
                    int idx = line.indexOf(" ");
                    String refDes = line.substring(0, idx);
                    line = line.substring(idx).strip();
                    idx =  line.indexOf(" ");
                    String pin = line.substring(0, idx);
                    netName = line.substring(idx).strip();
                    netName = netName.substring(1, netName.length()-1); //remove quotes
                    ret.add(netName + "," + refDes + "," + pin);
                    maybeMore = false;
                }
                else if (line.startsWith(".TER")) {
                    line = line.substring(4).strip();
                    int idx = line.indexOf(" ");
                    String refDes = line.substring(0, idx);
                    String pin = line.substring(idx).strip();
                    ret.add(netName + "," + refDes + "," + pin);
                    maybeMore = true;
                }
                else if (maybeMore && !line.isBlank()) {
                    line = line.strip();
                    int idx = line.indexOf(" ");
                    String refDes = line.substring(0, idx);
                    String pin = line.substring(idx).strip();
                    ret.add(netName + "," + refDes + "," + pin);
                }
                else if (line.isBlank()) {
                    maybeMore = false;
                }
                line = reader.readLine();
            }
        }
        Collections.sort(ret);
        
        return ret;
    }
    

}
